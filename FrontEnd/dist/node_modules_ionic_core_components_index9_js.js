"use strict";
(self["webpackChunkfrontend"] = self["webpackChunkfrontend"] || []).push([["node_modules_ionic_core_components_index9_js"],{

/***/ "./node_modules/@ionic/core/components/index9.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ionic/core/components/index9.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   startTapClick: () => (/* binding */ startTapClick)
/* harmony export */ });
/* harmony import */ var _index5_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index5.js */ "./node_modules/@ionic/core/components/index5.js");
/* harmony import */ var _helpers_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./helpers.js */ "./node_modules/@ionic/core/components/helpers.js");
/*!
 * (C) Ionic http://ionicframework.com - MIT License
 */



const startTapClick = (config) => {
    if (_index5_js__WEBPACK_IMPORTED_MODULE_0__.d === undefined) {
        return;
    }
    let lastTouch = -MOUSE_WAIT * 10;
    let lastActivated = 0;
    let activatableEle;
    let activeRipple;
    let activeDefer;
    const useRippleEffect = config.getBoolean('animated', true) && config.getBoolean('rippleEffect', true);
    const clearDefers = new WeakMap();
    // Touch Events
    const onTouchStart = (ev) => {
        lastTouch = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.u)(ev);
        pointerDown(ev);
    };
    const onTouchEnd = (ev) => {
        lastTouch = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.u)(ev);
        pointerUp(ev);
    };
    const onMouseDown = (ev) => {
        // Ignore right clicks
        if (ev.button === 2) {
            return;
        }
        const t = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.u)(ev) - MOUSE_WAIT;
        if (lastTouch < t) {
            pointerDown(ev);
        }
    };
    const onMouseUp = (ev) => {
        const t = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.u)(ev) - MOUSE_WAIT;
        if (lastTouch < t) {
            pointerUp(ev);
        }
    };
    const cancelActive = () => {
        if (activeDefer)
            clearTimeout(activeDefer);
        activeDefer = undefined;
        if (activatableEle) {
            removeActivated(false);
            activatableEle = undefined;
        }
    };
    const pointerDown = (ev) => {
        if (activatableEle) {
            return;
        }
        setActivatedElement(getActivatableTarget(ev), ev);
    };
    const pointerUp = (ev) => {
        setActivatedElement(undefined, ev);
    };
    const setActivatedElement = (el, ev) => {
        // do nothing
        if (el && el === activatableEle) {
            return;
        }
        if (activeDefer)
            clearTimeout(activeDefer);
        activeDefer = undefined;
        const { x, y } = (0,_helpers_js__WEBPACK_IMPORTED_MODULE_1__.v)(ev);
        // deactivate selected
        if (activatableEle) {
            if (clearDefers.has(activatableEle)) {
                throw new Error('internal error');
            }
            if (!activatableEle.classList.contains(ACTIVATED)) {
                addActivated(activatableEle, x, y);
            }
            removeActivated(true);
        }
        // activate
        if (el) {
            const deferId = clearDefers.get(el);
            if (deferId) {
                clearTimeout(deferId);
                clearDefers.delete(el);
            }
            el.classList.remove(ACTIVATED);
            const callback = () => {
                addActivated(el, x, y);
                activeDefer = undefined;
            };
            if (isInstant(el)) {
                callback();
            }
            else {
                activeDefer = setTimeout(callback, ADD_ACTIVATED_DEFERS);
            }
        }
        activatableEle = el;
    };
    const addActivated = (el, x, y) => {
        lastActivated = Date.now();
        el.classList.add(ACTIVATED);
        if (!useRippleEffect)
            return;
        const rippleEffect = getRippleEffect(el);
        if (rippleEffect !== null) {
            removeRipple();
            activeRipple = rippleEffect.addRipple(x, y);
        }
    };
    const removeRipple = () => {
        if (activeRipple !== undefined) {
            activeRipple.then((remove) => remove());
            activeRipple = undefined;
        }
    };
    const removeActivated = (smooth) => {
        removeRipple();
        const active = activatableEle;
        if (!active) {
            return;
        }
        const time = CLEAR_STATE_DEFERS - Date.now() + lastActivated;
        if (smooth && time > 0 && !isInstant(active)) {
            const deferId = setTimeout(() => {
                active.classList.remove(ACTIVATED);
                clearDefers.delete(active);
            }, CLEAR_STATE_DEFERS);
            clearDefers.set(active, deferId);
        }
        else {
            active.classList.remove(ACTIVATED);
        }
    };
    _index5_js__WEBPACK_IMPORTED_MODULE_0__.d.addEventListener('ionGestureCaptured', cancelActive);
    _index5_js__WEBPACK_IMPORTED_MODULE_0__.d.addEventListener('touchstart', onTouchStart, true);
    _index5_js__WEBPACK_IMPORTED_MODULE_0__.d.addEventListener('touchcancel', onTouchEnd, true);
    _index5_js__WEBPACK_IMPORTED_MODULE_0__.d.addEventListener('touchend', onTouchEnd, true);
    /**
     * Tap click effects such as the ripple effect should
     * not happen when scrolling. For example, if a user scrolls
     * the page but also happens to do a touchstart on a button
     * as part of the scroll, the ripple effect should not
     * be dispatched. The ripple effect should only happen
     * if the button is activated and the page is not scrolling.
     *
     * pointercancel is dispatched on a gesture when scrolling
     * starts, so this lets us avoid having to listen for
     * ion-content's scroll events.
     */
    _index5_js__WEBPACK_IMPORTED_MODULE_0__.d.addEventListener('pointercancel', cancelActive, true);
    _index5_js__WEBPACK_IMPORTED_MODULE_0__.d.addEventListener('mousedown', onMouseDown, true);
    _index5_js__WEBPACK_IMPORTED_MODULE_0__.d.addEventListener('mouseup', onMouseUp, true);
};
// TODO(FW-2832): type
const getActivatableTarget = (ev) => {
    if (ev.composedPath !== undefined) {
        /**
         * composedPath returns EventTarget[]. However,
         * objects other than Element can be targets too.
         * For example, AudioContext can be a target. In this
         * case, we know that the event is a UIEvent so we
         * can assume that the path will contain either Element
         * or ShadowRoot.
         */
        const path = ev.composedPath();
        for (let i = 0; i < path.length - 2; i++) {
            const el = path[i];
            if (!(el instanceof ShadowRoot) && el.classList.contains('ion-activatable')) {
                return el;
            }
        }
    }
    else {
        return ev.target.closest('.ion-activatable');
    }
};
const isInstant = (el) => {
    return el.classList.contains('ion-activatable-instant');
};
const getRippleEffect = (el) => {
    if (el.shadowRoot) {
        const ripple = el.shadowRoot.querySelector('ion-ripple-effect');
        if (ripple) {
            return ripple;
        }
    }
    return el.querySelector('ion-ripple-effect');
};
const ACTIVATED = 'ion-activated';
const ADD_ACTIVATED_DEFERS = 100;
const CLEAR_STATE_DEFERS = 150;
const MOUSE_WAIT = 2500;




/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm9kZV9tb2R1bGVzX2lvbmljX2NvcmVfY29tcG9uZW50c19pbmRleDlfanMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ3VDO0FBQ29CO0FBQzNEO0FBQ0E7QUFDQSxRQUFRLHlDQUFHO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQiw4Q0FBRztBQUN2QjtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsOENBQUc7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsOENBQUc7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiw4Q0FBRztBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsT0FBTyxFQUFFLDhDQUFZO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSSx5Q0FBRztBQUNQLElBQUkseUNBQUc7QUFDUCxJQUFJLHlDQUFHO0FBQ1AsSUFBSSx5Q0FBRztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUkseUNBQUc7QUFDUCxJQUFJLHlDQUFHO0FBQ1AsSUFBSSx5Q0FBRztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHFCQUFxQjtBQUM3QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDeUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9mcm9udGVuZC8uL25vZGVfbW9kdWxlcy9AaW9uaWMvY29yZS9jb21wb25lbnRzL2luZGV4OS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiFcclxuICogKEMpIElvbmljIGh0dHA6Ly9pb25pY2ZyYW1ld29yay5jb20gLSBNSVQgTGljZW5zZVxyXG4gKi9cclxuaW1wb3J0IHsgZCBhcyBkb2MgfSBmcm9tICcuL2luZGV4NS5qcyc7XHJcbmltcG9ydCB7IHUgYXMgbm93LCB2IGFzIHBvaW50ZXJDb29yZCB9IGZyb20gJy4vaGVscGVycy5qcyc7XHJcblxyXG5jb25zdCBzdGFydFRhcENsaWNrID0gKGNvbmZpZykgPT4ge1xyXG4gICAgaWYgKGRvYyA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgbGV0IGxhc3RUb3VjaCA9IC1NT1VTRV9XQUlUICogMTA7XHJcbiAgICBsZXQgbGFzdEFjdGl2YXRlZCA9IDA7XHJcbiAgICBsZXQgYWN0aXZhdGFibGVFbGU7XHJcbiAgICBsZXQgYWN0aXZlUmlwcGxlO1xyXG4gICAgbGV0IGFjdGl2ZURlZmVyO1xyXG4gICAgY29uc3QgdXNlUmlwcGxlRWZmZWN0ID0gY29uZmlnLmdldEJvb2xlYW4oJ2FuaW1hdGVkJywgdHJ1ZSkgJiYgY29uZmlnLmdldEJvb2xlYW4oJ3JpcHBsZUVmZmVjdCcsIHRydWUpO1xyXG4gICAgY29uc3QgY2xlYXJEZWZlcnMgPSBuZXcgV2Vha01hcCgpO1xyXG4gICAgLy8gVG91Y2ggRXZlbnRzXHJcbiAgICBjb25zdCBvblRvdWNoU3RhcnQgPSAoZXYpID0+IHtcclxuICAgICAgICBsYXN0VG91Y2ggPSBub3coZXYpO1xyXG4gICAgICAgIHBvaW50ZXJEb3duKGV2KTtcclxuICAgIH07XHJcbiAgICBjb25zdCBvblRvdWNoRW5kID0gKGV2KSA9PiB7XHJcbiAgICAgICAgbGFzdFRvdWNoID0gbm93KGV2KTtcclxuICAgICAgICBwb2ludGVyVXAoZXYpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IG9uTW91c2VEb3duID0gKGV2KSA9PiB7XHJcbiAgICAgICAgLy8gSWdub3JlIHJpZ2h0IGNsaWNrc1xyXG4gICAgICAgIGlmIChldi5idXR0b24gPT09IDIpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB0ID0gbm93KGV2KSAtIE1PVVNFX1dBSVQ7XHJcbiAgICAgICAgaWYgKGxhc3RUb3VjaCA8IHQpIHtcclxuICAgICAgICAgICAgcG9pbnRlckRvd24oZXYpO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBjb25zdCBvbk1vdXNlVXAgPSAoZXYpID0+IHtcclxuICAgICAgICBjb25zdCB0ID0gbm93KGV2KSAtIE1PVVNFX1dBSVQ7XHJcbiAgICAgICAgaWYgKGxhc3RUb3VjaCA8IHQpIHtcclxuICAgICAgICAgICAgcG9pbnRlclVwKGV2KTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgY29uc3QgY2FuY2VsQWN0aXZlID0gKCkgPT4ge1xyXG4gICAgICAgIGlmIChhY3RpdmVEZWZlcilcclxuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KGFjdGl2ZURlZmVyKTtcclxuICAgICAgICBhY3RpdmVEZWZlciA9IHVuZGVmaW5lZDtcclxuICAgICAgICBpZiAoYWN0aXZhdGFibGVFbGUpIHtcclxuICAgICAgICAgICAgcmVtb3ZlQWN0aXZhdGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgYWN0aXZhdGFibGVFbGUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHBvaW50ZXJEb3duID0gKGV2KSA9PiB7XHJcbiAgICAgICAgaWYgKGFjdGl2YXRhYmxlRWxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgc2V0QWN0aXZhdGVkRWxlbWVudChnZXRBY3RpdmF0YWJsZVRhcmdldChldiksIGV2KTtcclxuICAgIH07XHJcbiAgICBjb25zdCBwb2ludGVyVXAgPSAoZXYpID0+IHtcclxuICAgICAgICBzZXRBY3RpdmF0ZWRFbGVtZW50KHVuZGVmaW5lZCwgZXYpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHNldEFjdGl2YXRlZEVsZW1lbnQgPSAoZWwsIGV2KSA9PiB7XHJcbiAgICAgICAgLy8gZG8gbm90aGluZ1xyXG4gICAgICAgIGlmIChlbCAmJiBlbCA9PT0gYWN0aXZhdGFibGVFbGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoYWN0aXZlRGVmZXIpXHJcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChhY3RpdmVEZWZlcik7XHJcbiAgICAgICAgYWN0aXZlRGVmZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgY29uc3QgeyB4LCB5IH0gPSBwb2ludGVyQ29vcmQoZXYpO1xyXG4gICAgICAgIC8vIGRlYWN0aXZhdGUgc2VsZWN0ZWRcclxuICAgICAgICBpZiAoYWN0aXZhdGFibGVFbGUpIHtcclxuICAgICAgICAgICAgaWYgKGNsZWFyRGVmZXJzLmhhcyhhY3RpdmF0YWJsZUVsZSkpIHtcclxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW50ZXJuYWwgZXJyb3InKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoIWFjdGl2YXRhYmxlRWxlLmNsYXNzTGlzdC5jb250YWlucyhBQ1RJVkFURUQpKSB7XHJcbiAgICAgICAgICAgICAgICBhZGRBY3RpdmF0ZWQoYWN0aXZhdGFibGVFbGUsIHgsIHkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJlbW92ZUFjdGl2YXRlZCh0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gYWN0aXZhdGVcclxuICAgICAgICBpZiAoZWwpIHtcclxuICAgICAgICAgICAgY29uc3QgZGVmZXJJZCA9IGNsZWFyRGVmZXJzLmdldChlbCk7XHJcbiAgICAgICAgICAgIGlmIChkZWZlcklkKSB7XHJcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQoZGVmZXJJZCk7XHJcbiAgICAgICAgICAgICAgICBjbGVhckRlZmVycy5kZWxldGUoZWwpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoQUNUSVZBVEVEKTtcclxuICAgICAgICAgICAgY29uc3QgY2FsbGJhY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhZGRBY3RpdmF0ZWQoZWwsIHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRGVmZXIgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmIChpc0luc3RhbnQoZWwpKSB7XHJcbiAgICAgICAgICAgICAgICBjYWxsYmFjaygpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgYWN0aXZlRGVmZXIgPSBzZXRUaW1lb3V0KGNhbGxiYWNrLCBBRERfQUNUSVZBVEVEX0RFRkVSUyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgYWN0aXZhdGFibGVFbGUgPSBlbDtcclxuICAgIH07XHJcbiAgICBjb25zdCBhZGRBY3RpdmF0ZWQgPSAoZWwsIHgsIHkpID0+IHtcclxuICAgICAgICBsYXN0QWN0aXZhdGVkID0gRGF0ZS5ub3coKTtcclxuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKEFDVElWQVRFRCk7XHJcbiAgICAgICAgaWYgKCF1c2VSaXBwbGVFZmZlY3QpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBjb25zdCByaXBwbGVFZmZlY3QgPSBnZXRSaXBwbGVFZmZlY3QoZWwpO1xyXG4gICAgICAgIGlmIChyaXBwbGVFZmZlY3QgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgcmVtb3ZlUmlwcGxlKCk7XHJcbiAgICAgICAgICAgIGFjdGl2ZVJpcHBsZSA9IHJpcHBsZUVmZmVjdC5hZGRSaXBwbGUoeCwgeSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlbW92ZVJpcHBsZSA9ICgpID0+IHtcclxuICAgICAgICBpZiAoYWN0aXZlUmlwcGxlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgYWN0aXZlUmlwcGxlLnRoZW4oKHJlbW92ZSkgPT4gcmVtb3ZlKCkpO1xyXG4gICAgICAgICAgICBhY3RpdmVSaXBwbGUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGNvbnN0IHJlbW92ZUFjdGl2YXRlZCA9IChzbW9vdGgpID0+IHtcclxuICAgICAgICByZW1vdmVSaXBwbGUoKTtcclxuICAgICAgICBjb25zdCBhY3RpdmUgPSBhY3RpdmF0YWJsZUVsZTtcclxuICAgICAgICBpZiAoIWFjdGl2ZSkge1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHRpbWUgPSBDTEVBUl9TVEFURV9ERUZFUlMgLSBEYXRlLm5vdygpICsgbGFzdEFjdGl2YXRlZDtcclxuICAgICAgICBpZiAoc21vb3RoICYmIHRpbWUgPiAwICYmICFpc0luc3RhbnQoYWN0aXZlKSkge1xyXG4gICAgICAgICAgICBjb25zdCBkZWZlcklkID0gc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBhY3RpdmUuY2xhc3NMaXN0LnJlbW92ZShBQ1RJVkFURUQpO1xyXG4gICAgICAgICAgICAgICAgY2xlYXJEZWZlcnMuZGVsZXRlKGFjdGl2ZSk7XHJcbiAgICAgICAgICAgIH0sIENMRUFSX1NUQVRFX0RFRkVSUyk7XHJcbiAgICAgICAgICAgIGNsZWFyRGVmZXJzLnNldChhY3RpdmUsIGRlZmVySWQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYWN0aXZlLmNsYXNzTGlzdC5yZW1vdmUoQUNUSVZBVEVEKTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG4gICAgZG9jLmFkZEV2ZW50TGlzdGVuZXIoJ2lvbkdlc3R1cmVDYXB0dXJlZCcsIGNhbmNlbEFjdGl2ZSk7XHJcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hzdGFydCcsIG9uVG91Y2hTdGFydCwgdHJ1ZSk7XHJcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcigndG91Y2hjYW5jZWwnLCBvblRvdWNoRW5kLCB0cnVlKTtcclxuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCd0b3VjaGVuZCcsIG9uVG91Y2hFbmQsIHRydWUpO1xyXG4gICAgLyoqXHJcbiAgICAgKiBUYXAgY2xpY2sgZWZmZWN0cyBzdWNoIGFzIHRoZSByaXBwbGUgZWZmZWN0IHNob3VsZFxyXG4gICAgICogbm90IGhhcHBlbiB3aGVuIHNjcm9sbGluZy4gRm9yIGV4YW1wbGUsIGlmIGEgdXNlciBzY3JvbGxzXHJcbiAgICAgKiB0aGUgcGFnZSBidXQgYWxzbyBoYXBwZW5zIHRvIGRvIGEgdG91Y2hzdGFydCBvbiBhIGJ1dHRvblxyXG4gICAgICogYXMgcGFydCBvZiB0aGUgc2Nyb2xsLCB0aGUgcmlwcGxlIGVmZmVjdCBzaG91bGQgbm90XHJcbiAgICAgKiBiZSBkaXNwYXRjaGVkLiBUaGUgcmlwcGxlIGVmZmVjdCBzaG91bGQgb25seSBoYXBwZW5cclxuICAgICAqIGlmIHRoZSBidXR0b24gaXMgYWN0aXZhdGVkIGFuZCB0aGUgcGFnZSBpcyBub3Qgc2Nyb2xsaW5nLlxyXG4gICAgICpcclxuICAgICAqIHBvaW50ZXJjYW5jZWwgaXMgZGlzcGF0Y2hlZCBvbiBhIGdlc3R1cmUgd2hlbiBzY3JvbGxpbmdcclxuICAgICAqIHN0YXJ0cywgc28gdGhpcyBsZXRzIHVzIGF2b2lkIGhhdmluZyB0byBsaXN0ZW4gZm9yXHJcbiAgICAgKiBpb24tY29udGVudCdzIHNjcm9sbCBldmVudHMuXHJcbiAgICAgKi9cclxuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVyY2FuY2VsJywgY2FuY2VsQWN0aXZlLCB0cnVlKTtcclxuICAgIGRvYy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCBvbk1vdXNlRG93biwgdHJ1ZSk7XHJcbiAgICBkb2MuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIG9uTW91c2VVcCwgdHJ1ZSk7XHJcbn07XHJcbi8vIFRPRE8oRlctMjgzMik6IHR5cGVcclxuY29uc3QgZ2V0QWN0aXZhdGFibGVUYXJnZXQgPSAoZXYpID0+IHtcclxuICAgIGlmIChldi5jb21wb3NlZFBhdGggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqIGNvbXBvc2VkUGF0aCByZXR1cm5zIEV2ZW50VGFyZ2V0W10uIEhvd2V2ZXIsXHJcbiAgICAgICAgICogb2JqZWN0cyBvdGhlciB0aGFuIEVsZW1lbnQgY2FuIGJlIHRhcmdldHMgdG9vLlxyXG4gICAgICAgICAqIEZvciBleGFtcGxlLCBBdWRpb0NvbnRleHQgY2FuIGJlIGEgdGFyZ2V0LiBJbiB0aGlzXHJcbiAgICAgICAgICogY2FzZSwgd2Uga25vdyB0aGF0IHRoZSBldmVudCBpcyBhIFVJRXZlbnQgc28gd2VcclxuICAgICAgICAgKiBjYW4gYXNzdW1lIHRoYXQgdGhlIHBhdGggd2lsbCBjb250YWluIGVpdGhlciBFbGVtZW50XHJcbiAgICAgICAgICogb3IgU2hhZG93Um9vdC5cclxuICAgICAgICAgKi9cclxuICAgICAgICBjb25zdCBwYXRoID0gZXYuY29tcG9zZWRQYXRoKCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwYXRoLmxlbmd0aCAtIDI7IGkrKykge1xyXG4gICAgICAgICAgICBjb25zdCBlbCA9IHBhdGhbaV07XHJcbiAgICAgICAgICAgIGlmICghKGVsIGluc3RhbmNlb2YgU2hhZG93Um9vdCkgJiYgZWwuY2xhc3NMaXN0LmNvbnRhaW5zKCdpb24tYWN0aXZhdGFibGUnKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGV2LnRhcmdldC5jbG9zZXN0KCcuaW9uLWFjdGl2YXRhYmxlJyk7XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IGlzSW5zdGFudCA9IChlbCkgPT4ge1xyXG4gICAgcmV0dXJuIGVsLmNsYXNzTGlzdC5jb250YWlucygnaW9uLWFjdGl2YXRhYmxlLWluc3RhbnQnKTtcclxufTtcclxuY29uc3QgZ2V0UmlwcGxlRWZmZWN0ID0gKGVsKSA9PiB7XHJcbiAgICBpZiAoZWwuc2hhZG93Um9vdCkge1xyXG4gICAgICAgIGNvbnN0IHJpcHBsZSA9IGVsLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignaW9uLXJpcHBsZS1lZmZlY3QnKTtcclxuICAgICAgICBpZiAocmlwcGxlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByaXBwbGU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGVsLnF1ZXJ5U2VsZWN0b3IoJ2lvbi1yaXBwbGUtZWZmZWN0Jyk7XHJcbn07XHJcbmNvbnN0IEFDVElWQVRFRCA9ICdpb24tYWN0aXZhdGVkJztcclxuY29uc3QgQUREX0FDVElWQVRFRF9ERUZFUlMgPSAxMDA7XHJcbmNvbnN0IENMRUFSX1NUQVRFX0RFRkVSUyA9IDE1MDtcclxuY29uc3QgTU9VU0VfV0FJVCA9IDI1MDA7XHJcblxyXG5leHBvcnQgeyBzdGFydFRhcENsaWNrIH07XHJcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==